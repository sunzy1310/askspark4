<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- spring的配置文件，这里主要配置和业务逻辑有关的 -->
	
	<!-- spring容器扫描除了controller之外的所有包 -->
	<context:component-scan base-package="com.keyten" />
	
	<!-- 加载类路劲下的properties文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- spring注入jedis -->
	<bean id="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig" >
		<property name="maxTotal">
			<value>${redis.pool.maxActive}</value>
		</property>
		<property name="maxIdle">
            <value>${redis.pool.maxIdle}</value>
        </property>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
	</bean>
	<!-- redis 哨兵 -->
	<bean id="jedisSentinelPool" class="redis.clients.jedis.JedisSentinelPool">
		<constructor-arg index="0">
			<value>${redis.mastername}</value>
		</constructor-arg>
		<constructor-arg index="1">
			<set>
				<value>${redis.host1}</value>
				<!-- <value>${redis.host2}</value>
				<value>${redis.host3}</value>
				<value>${redis.host4}</value>
				<value>${redis.host5}</value> -->
			</set>
		</constructor-arg>
		<constructor-arg index="2" ref="genericObjectPoolConfig" />
	</bean>
	<!-- c3p0数据源，事务控制，xxx -->
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- druid数据源 -->  
    <!-- <bean id="testDataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
   		<property name="driverClassName" value="${jdbc.driverClass}" />  
      	<property name="url" value="${jdbc.jdbcUrl}" />   
      	<property name="username" value="${jdbc.user}"></property>  
      	<property name="password" value="${jdbc.password}" />
      	<property name="filters"  value="${db.filters}"></property>  
      	<property name="maxActive" value="${db.pool.maxActive}"></property>  
      	<property name="initialSize" value="${db.pool.initialSize}"></property>  
      	<property name="minIdle" value="${db.pool.minIdle}"></property>  
      	<property name="maxWait" value="${db.maxWait}"></property>      
      	<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"></property>  
      	<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"></property>  
      	<property name="validationQuery" value="${db.validationQuery}"></property>  
      	<property name="testWhileIdle" value="${db.testWhileIdle}"></property>  
      	<property name="testOnBorrow" value="${db.testOnBorrow}"></property>  
      	<property name="testOnReturn" value="${db.testOnReturn}"></property>  
      	<property name="poolPreparedStatements" value="${db.poolPreparedStatements}"></property>  
      	<property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"></property>  
      	监控数据库  
      	<property name="proxyFilters">  
	      <list>  
	      	<ref bean="log-filter" />  
	      </list>   
      	</property>
    </bean>  --> 
	
	<!-- 开始 配置与MyBatis的整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定MyBatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 指定数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定Mybatis的mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.keyten.base.dao"></property>
	</bean>
	<!-- 结束 配置与MyBatis的整合 -->
	
	<!-- 配置一个可以执行批量操作的sqlsession 用于执行批量添加等操作 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 传构造参数  sqlSessionFactory 并传入批量类型的执行器-->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	
	<!-- 事务控制的配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源  -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	
	<!-- 配置事务增强，也就是事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!-- 以get开头的方法 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务有两种 1：基于注解的事务    2：基于xml的配置形式的事务 -->
	<aop:config>
		<!-- 切入点表达式  *（返回值类型所有） com.keyten.fox.service..(service包下及子包下的)*（所有类）(..（参数任意多个）)（的方法）-->
		<aop:pointcut expression="execution(* com.keyten.fox.service..*(..))" id="txPoint"/>
		<!-- 配置事务增强 （tx 名称空间） 通过txAdvice切入   切入 txPoint匹配的方法 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	<!-- Spring配置文件的核心点 （数据源、与Mybatis的整合、事务控制） -->
	
</beans>
